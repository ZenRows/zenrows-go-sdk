package problem

import "fmt"

const (
	// ContentTypeJSON https://tools.ietf.org/html/rfc7807#section-6.1
	ContentTypeJSON = "application/problem+json"
)

// Problem represents an RFC7807 error response.
type Problem struct { //nolint:errname
	// Code is an application-specific error code, expressed as a string value.
	Code string `json:"code"`

	// Detail is the human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance an absolute URI that identifies the specific occurrence of the problem.
	Instance string `json:"instance"`

	// Status is the HTTP status code generated by the origin server for this
	// occurrence of the problem.
	Status int `json:"status"`

	// Title is the title that appropriately describes it (think short)
	// Written in english and readable for engineers (usually not suited for
	// non-technical stakeholders and not localized); example: "Service Unavailable"
	Title string `json:"title"`

	// Type is the type URI (typically, with the "http" or "https" scheme) that identifies the problem type.
	// When dereferenced, it SHOULD provide human-readable documentation for the problem type
	Type string `json:"type"`
}

func (p *Problem) Error() string {
	msg := fmt.Sprintf("%s [HTTP %d]", p.Title, p.Status)
	if p.Detail != "" {
		msg += fmt.Sprintf(": %s", p.Detail)
	}

	return msg
}
